// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

contract dNFT is ERC721, ERC721URIStorage, Ownable {
    using Counters for Counters.Counter;

    Counters.Counter private _tokenIdCounter;
    // Metadata info for each stage of the NFT on IPFS.
    string[] internal IpfsUri = [
        "ipfs://bafyreifguuazwfh6qhtwcwe3arhuvbi5t7jq43q4ystgzwbs226jsinfoi/metadata.json",
        "ipfs://bafyreiey5dwt6fkecufvm25y4x3ppuwjuit7ngawmp7qia3sa2ldjkduc4/metadata.json",
        "ipfs://bafyreibwiucepwpfe4ewxa7r3b5afvpuevtkskihafhonboeutm32min5a/metadata.json"        
    ];

    uint internal interval;
    uint internal lastTimeStamp;

    constructor(uint _interval) ERC721("dnft", "dnft") {
        interval = _interval;
        lastTimeStamp = block.timestamp;
    }

    function checkUpkeep(bytes calldata /* checkData */) external view returns (bool upkeepNeeded  /* bytes memory performData */) {
        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata /* performData */) external {
        //We highly recommend revalidating the upkeep in the performUpkeep function
        if ((block.timestamp - lastTimeStamp) > interval ) {
            lastTimeStamp = block.timestamp;
            growFlower(0);
        }
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    }

    function safeMint(address to, string memory uri) public onlyOwner {
        uint256 tokenId = _tokenIdCounter.current();
        _tokenIdCounter.increment();
        _safeMint(to, tokenId);
        _setTokenURI(tokenId, uri);
    }

    function growFlower(uint256 _tokenId) public {
        if(flowerStage(_tokenId) >= 2){return;} // here this is no more than 2 states
        // get the current stage of the flower and add 1
        uint256 newVal = flowerStage(_tokenId) + 1;
        // store the new URI
        string memory newUri = IpfsUri[newVal];
        // update the URI
        _setTokenURI(_tokenId, newUri);
    }

    // determin the stage of the flower growth
    function flowerStage(uint256 _tokenId) public view returns (uint256) {
        //string memory _url = tokenURI(_tokenId);
        bytes32 tbyte = keccak256(abi.encodePacked(tokenURI(_tokenId)));
        uint256 L = IpfsUri.length;
        for (uint256 i=0; i<L; i++) {
            if (keccak256(abi.encodePacked(IpfsUri[i])) == tbyte) {
                return i;
            }
        }
        return L + 1;
    }
    // The following functions are overrides required by Solidity.

    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {
        super._burn(tokenId);
    }

    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (string memory)
    {
        return super.tokenURI(tokenId);
    }
}
